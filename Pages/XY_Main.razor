@implements IAsyncDisposable
@page "/"

<!--XY-->@*<div id="Quadrantt" class="" style="position:relative; height:100vh;">*@
<div id="Quadrant" class="bg-secondaryDark text-white" style="position:relative; height:100vh; background-color: #2a2e31;">
    <div class="spinner-border text-light" id="load" role="status" style="display:block; position:absolute; left:45%;top:45% ; z-index:1; font-size: 1rem;">
        <span class="visually-hidden"></span>
    </div>
    <button class="btn btn-sm text-white" style="position:absolute ; bottom: 1px;" data-bs-toggle="modal" data-bs-target="#myModal" @onclick="openModal">

        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye"
             viewBox="0 0 16 16">
            <path d="M16 8s-3-5.5-8-5.5S0 8 0 8s3 5.5 8 5.5S16 8 16 8zM1.173 8a13.133 13.133 0 0 1 1.66-2.043C4.12 4.668 5.88 3.5 8 3.5c2.12 0 3.879 1.168 5.168 2.457A13.133 13.133 0 0 1 14.828 8c-.058.087-.122.183-.195.288-.335.48-.83 1.12-1.465 1.755C11.879 11.332 10.119 12.5 8 12.5c-2.12 0-3.879-1.168-5.168-2.457A13.134 13.134 0 0 1 1.172 8z" />
            <path d="M8 5.5a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zM4.5 8a3.5 3.5 0 1 1 7 0 3.5 3.5 0 0 1-7 0z" />
        </svg>
    </button>

</div>

@code {
    [Inject]
    private IConfiguration configuration { get; set; }
    //setApitKey
    string key { get; set; }
    string key_value { get; set; }
    string url { get; set; }
    //Read_AOI
    JArray setData = new JArray();
    JObject getData = new JObject();
    public ClassData classData = new ClassData();
    //setScript
    public IJSObjectReference Quadrant;
    //getUrl
    private UriBuilder uriBuilder { get; set; }
    string lineSet { get; set; }
    string location { get; set; }
    string aoiset { get; set; }

    bool resultGetUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        resultGetUrl = getUrl();

    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //await JS.InvokeVoidAsync("console.clear");
        if (resultGetUrl == true)
        {
            setApiKey();
            await SetLoad();
        }
    }
    async Task SetLoad()
    {

        await setScript();
        read_AOI(lineSet, location , aoiset);
        await setChart();

    }
    void setApiKey()
    {
        key = configuration["Headers:key"];
        key_value = configuration["Headers:value"];
        url = configuration["Url"];
    }
    async Task setScript()
    {
        Quadrant = await JS.InvokeAsync<IJSObjectReference>("import", "./Quadrant.js");

    }
    async Task setChart()
    {

        var convertObj = JsonConvert.SerializeObject(setData);
        var convertObjUcl_lcl = JsonConvert.SerializeObject(getData["ucl_lcl"]);
        if(convertObj == "null" || convertObj =="[]" || convertObjUcl_lcl == "null")
        {
            await Quadrant.InvokeVoidAsync("getdata", "#Quadrant", false, null, null);
        }
        else
        {
            await Quadrant.InvokeVoidAsync("getdata", "#Quadrant", convertObj, convertObjUcl_lcl, null);
        }
    }
    //<CALL API>//------------------------------------------------------------------------------/
    void read_AOI(string lineSet, string location , string aoiSet)
    {
        var bf = DateTime.Now;
        //var jsonbody = new { station = "aoi_pre", line = "C1", location = "All" };
        var jsonbody = new { station = aoiSet, line = lineSet, location = location };
        getData = Tools.apiPost(url + "Aoi/OfferXY", key, key_value, jsonbody);
        setData = (JArray)getData["data"];
        var af = DateTime.Now;
        var totaltime = af - bf;

        var info = " AOI :: " + aoiSet + " line :: " + lineSet + " location :: " + location + " type :: XY";
        JS.InvokeVoidAsync("console.log", "(XYPage)(" + info + ")Aoi/OfferXY:::" + totaltime.TotalSeconds + " seconds");
    }
  
    bool getUrl()
    {
        lineSet = GetQueryParm("line");
        location = GetQueryParm("location");
        aoiset =  GetQueryParm("aoi");
        return lineSet == "" && location == ""  && aoiset == "" ? false : true;

    }
    string GetQueryParm(string parmName)
    {
        uriBuilder = new UriBuilder(MyNavigationManager.Uri);
        var q = System.Web.HttpUtility.ParseQueryString(uriBuilder.Query);
        return q[parmName] ?? "";
    }
    void openModal()
    {
        var path = "?line=" + lineSet + "&location=" + location;
        //Debug//JS.InvokeAsync<object>("open", "/Modal/"+path, "_blank");
        JS.InvokeAsync<object>("open", "/xy_offset/Modal/"+path, "_blank");
    }
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (Quadrant is not null)
        {
            await Quadrant.DisposeAsync();

        }
        GC.SuppressFinalize(this);
    }
}